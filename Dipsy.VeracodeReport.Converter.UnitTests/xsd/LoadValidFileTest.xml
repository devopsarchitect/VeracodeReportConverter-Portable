<?xml version="1.0" encoding="ISO-8859-1"?>

<detailedreport xmlns:xsi="http&#x3a;&#x2f;&#x2f;www.w3.org&#x2f;2001&#x2f;XMLSchema-instance" xmlns="https&#x3a;&#x2f;&#x2f;www.veracode.com&#x2f;schema&#x2f;reports&#x2f;export&#x2f;1.0" xsi:schemaLocation="https&#x3a;&#x2f;&#x2f;www.veracode.com&#x2f;schema&#x2f;reports&#x2f;export&#x2f;1.0 https&#x3a;&#x2f;&#x2f;analysiscenter.veracode.com&#x2f;resource&#x2f;detailedreport.xsd" report_format_version="1.5" app_name="Encoding Test" app_id="405364" first_build_submitted_date="2018-03-02 16&#x3a;51&#x3a;06 UTC" version="7 Mar 2018 Static &#x28;2&#x29;" build_id="2066242" submitter="Veracode" platform="Not Specified" assurance_level="5" business_criticality="5" generation_date="2018-03-18 16&#x3a;13&#x3a;34 UTC" veracode_level="VL3" total_flaws="5" flaws_not_mitigated="5" teams="" life_cycle_stage="Not Specified" planned_deployment_date="2018-03-02 16&#x3a;42&#x3a;48 UTC" last_update_time="2018-03-07 10&#x3a;15&#x3a;59 UTC" is_latest_build="true" policy_name="Veracode Recommended Very High" policy_version="1" policy_compliance_status="Did Not Pass" policy_rules_status="Did Not Pass" grace_period_expired="true" scan_overdue="false" business_owner="" business_unit="Not Specified" tags="" legacy_scan_engine="false">
  <static-analysis rating="B" score="98" submitted_date="2018-03-07 10&#x3a;09&#x3a;05 UTC" published_date="2018-03-07 10&#x3a;15&#x3a;52 UTC" version="7 Mar 2018 Static &#x28;2&#x29;" next_scan_due="2018-06-07 09&#x3a;15&#x3a;52 UTC" analysis_size_bytes="7680" engine_version="120233">
      <modules>
         <module name="HtmlDecode.dll" compiler="MSIL_MSVC14_X86" os="Win32" architecture="CIL32" loc="64" score="98" numflawssev0="0" numflawssev1="0" numflawssev2="0" numflawssev3="5" numflawssev4="0" numflawssev5="0"/>
      </modules>
   </static-analysis>
   <severity level="5"/>
   <severity level="4"/>
   <severity level="3">
      <category categoryid="20" categoryname="Cross-Site Scripting" pcirelated="false">
         <desc>
            <para text="Cross-site scripting &#x28;XSS&#x29; attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed occur whenever a web application uses untrusted data in the output it generates without validating or encoding it.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise sensitive information, with new attack vectors being discovered on a regular basis.  XSS is also commonly referred to as HTML injection."/>
            <para text="XSS vulnerabilities can be either persistent or transient &#x28;often referred to as stored and reflected, respectively&#x29;.  In a persistent XSS vulnerability, the injected code is stored by the application, for example within a blog comment or message board.  The attack occurs whenever a victim views the page containing the malicious script.  In a transient XSS vulnerability, the injected code is included directly in the HTTP request.  These attacks are often carried out via malicious URLs sent via email or another website and requires the victim to browse to that link.  The consequence of an XSS attack to a victim is the same regardless of whether it is persistent or transient&#x3b; however, persistent XSS vulnerabilities are likely to affect a greater number of victims due to its delivery mechanism."/>
         </desc>
         <recommendations>
            <para text="Several techniques can be used to prevent XSS attacks. These techniques complement each other and address security at different points in the application. Using multiple techniques provides defense-in-depth and minimizes the likelihood of a XSS vulnerability.">
               <bulletitem text="Use output filtering to sanitize all output generated from user-supplied input, selecting the appropriate method of encoding based on the use case of the untrusted data.  For example, if the data is being written to the body of an HTML page, use HTML entity encoding.  However, if the data is being used to construct generated Javascript or if it is consumed by client-side methods that may interpret it as code &#x28;a common technique in Web 2.0 applications&#x29;, additional restrictions may be necessary beyond simple HTML encoding."/>
               <bulletitem text="Validate user-supplied input using positive filters &#x28;white lists&#x29; to ensure that it conforms to the expected format, using centralized data validation routines when possible. "/>
               <bulletitem text="Do not permit users to include HTML content in posts, notes, or other data that will be displayed by the application.  If users are permitted to include HTML tags, then carefully limit access to specific elements or attributes, and use strict validation filters to prevent abuse."/>
            </para>
         </recommendations>
         <cwe cweid="80" cwename="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" pcirelated="false" owasp="931" sans="79">
            <description>
               <text text="This call contains a cross-site scripting &#x28;XSS&#x29; flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis."/>
            </description>
            <staticflaws>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="2" module="htmldecode.dll" type="system_web_dll.System.Web.HttpResponseBase.Write" description="This call to system_web_dll.System.Web.HttpResponseBase.Write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write&#x28;&#x29; contains tainted data from the variable this.ControlMethod&#x28;&#x29;. The tainted data originated from an earlier call to htmldecode_dll.VirtualController.vc_mvcentry.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;QSde6PQlbxAPLvVx1K933A&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2018-03-02 16&#x3a;42&#x3a;47 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2018-03-02 16&#x3a;54&#x3a;51 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="homecontroller.cs" line="12" sourcefilepath="users&#x2f;mwatson&#x2f;source&#x2f;repos&#x2f;htmldecode&#x2f;htmldecode&#x2f;controllers&#x2f;" scope="htmldecode_dll.HtmlDecode.Controllers.HomeController" functionprototype="System.Web.Mvc.ActionResult Test&#x28;string&#x29;" functionrelativelocation="16"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="4" module="htmldecode.dll" type="system_web_dll.System.Web.HttpResponseBase.Write" description="This call to system_web_dll.System.Web.HttpResponseBase.Write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write&#x28;&#x29; contains tainted data from the variable HtmlDecode&#x28;&#x29;. The tainted data originated from an earlier call to htmldecode_dll.VirtualController.vc_mvcentry.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;QSde6PQlbxAPLvVx1K933A&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2018-03-07 10&#x3a;01&#x3a;29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2018-03-07 10&#x3a;15&#x3a;52 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="homecontroller.cs" line="14" sourcefilepath="users&#x2f;mwatson&#x2f;source&#x2f;repos&#x2f;htmldecode&#x2f;htmldecode&#x2f;controllers&#x2f;" scope="htmldecode_dll.HtmlDecode.Controllers.HomeController" functionprototype="System.Web.Mvc.ActionResult Test&#x28;string&#x29;" functionrelativelocation="35"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="3" module="htmldecode.dll" type="system_web_dll.System.Web.HttpResponseBase.Write" description="This call to system_web_dll.System.Web.HttpResponseBase.Write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write&#x28;&#x29; contains tainted data from the variable this.get_Server&#x28;&#x29;.HtmlEncode&#x28;&#x29;. The tainted data originated from an earlier call to htmldecode_dll.VirtualController.vc_mvcentry.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;QSde6PQlbxAPLvVx1K933A&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2018-03-07 10&#x3a;01&#x3a;29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2018-03-07 10&#x3a;15&#x3a;52 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="homecontroller.cs" line="17" sourcefilepath="users&#x2f;mwatson&#x2f;source&#x2f;repos&#x2f;htmldecode&#x2f;htmldecode&#x2f;controllers&#x2f;" scope="htmldecode_dll.HtmlDecode.Controllers.HomeController" functionprototype="System.Web.Mvc.ActionResult Test&#x28;string&#x29;" functionrelativelocation="60"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="1" module="htmldecode.dll" type="system_web_dll.System.Web.HttpResponseBase.Write" description="This call to system_web_dll.System.Web.HttpResponseBase.Write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write&#x28;&#x29; contains tainted data from the variable this.get_Server&#x28;&#x29;.HtmlDecode&#x28;&#x29;. The tainted data originated from an earlier call to htmldecode_dll.VirtualController.vc_mvcentry.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;QSde6PQlbxAPLvVx1K933A&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2018-03-02 16&#x3a;42&#x3a;47 UTC" remediation_status="Open" cia_impact="ppn" grace_period_expires="2018-03-02 16&#x3a;54&#x3a;51 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="homecontroller.cs" line="18" sourcefilepath="users&#x2f;mwatson&#x2f;source&#x2f;repos&#x2f;htmldecode&#x2f;htmldecode&#x2f;controllers&#x2f;" scope="htmldecode_dll.HtmlDecode.Controllers.HomeController" functionprototype="System.Web.Mvc.ActionResult Test&#x28;string&#x29;" functionrelativelocation="73"/>
               <flaw severity="3" categoryname="Improper Neutralization of Script-Related HTML Tags in a Web Page &#x28;Basic XSS&#x29;" count="1" issueid="5" module="htmldecode.dll" type="system_web_dll.System.Web.HttpResponseBase.Write" description="This call to system_web_dll.System.Web.HttpResponseBase.Write&#x28;&#x29; contains a cross-site scripting &#x28;XSS&#x29; flaw. The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim&#x27;s browser. XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write&#x28;&#x29; contains tainted data from the variable this.get_Server&#x28;&#x29;.HtmlDecode&#x28;&#x29;. The tainted data originated from an earlier call to htmldecode_dll.VirtualController.vc_mvcentry.&#xd;&#xa;&#xd;&#xa;Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response. The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping&#x3b; if the data is being written to an attribute, use attribute escaping&#x3b; etc. Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS_&#x25;28Cross_Site_Scripting&#x25;29_Prevention_Cheat_Sheet. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.&#xd;&#xa;&#xd;&#xa;References&#x3a; &#xd;&#xa;CWE &#x28;http&#x3a;&#x2f;&#x2f;cwe.mitre.org&#x2f;data&#x2f;definitions&#x2f;79.html&#x29; &#xd;&#xa;OWASP &#x28;http&#x3a;&#x2f;&#x2f;www.owasp.org&#x2f;index.php&#x2f;XSS&#x29; &#xd;&#xa;WASC &#x28;http&#x3a;&#x2f;&#x2f;webappsec.pbworks.com&#x2f;Cross-Site-Scripting&#x29; &#xd;&#xa;Supported Cleansers &#x28;https&#x3a;&#x2f;&#x2f;help.veracode.com&#x2f;reader&#x2f;4EKhlLSMHm5jC8P8j3XccQ&#x2f;QSde6PQlbxAPLvVx1K933A&#x29;&#xd;&#xa;&#xd;&#xa;" note="" cweid="80" remediationeffort="3" exploitLevel="0" categoryid="20" pcirelated="true" date_first_occurrence="2018-03-07 10&#x3a;01&#x3a;29 UTC" remediation_status="New" cia_impact="ppn" grace_period_expires="2018-03-07 10&#x3a;15&#x3a;52 UTC" affects_policy_compliance="true" mitigation_status="none" mitigation_status_desc="Not Mitigated" sourcefile="homecontroller.cs" line="19" sourcefilepath="users&#x2f;mwatson&#x2f;source&#x2f;repos&#x2f;htmldecode&#x2f;htmldecode&#x2f;controllers&#x2f;" scope="htmldecode_dll.HtmlDecode.Controllers.HomeController" functionprototype="System.Web.Mvc.ActionResult Test&#x28;string&#x29;" functionrelativelocation="91"/>
            </staticflaws>
         </cwe>
      </category>
   </severity>
   <severity level="2"/>
   <severity level="1"/>
   <severity level="0"/>
   <flaw-status new="3" reopen="0" open="2" cannot-reproduce="0" fixed="0" total="5" not_mitigated="5" sev-1-change="0" sev-2-change="0" sev-3-change="3" sev-4-change="0" sev-5-change="0"/>
   <customfields>
      <customfield name="Custom 1" value=""/>
      <customfield name="Custom 2" value=""/>
      <customfield name="Custom 3" value=""/>
      <customfield name="Custom 4" value=""/>
      <customfield name="Custom 5" value=""/>
      <customfield name="Custom 6" value=""/>
      <customfield name="Custom 7" value=""/>
      <customfield name="Custom 8" value=""/>
      <customfield name="Custom 9" value=""/>
      <customfield name="Custom 10" value=""/>
   </customfields>
</detailedreport>
